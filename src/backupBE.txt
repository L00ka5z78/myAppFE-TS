validationResults.js

import { validationResult } from "express-validator";

export const validateResult = (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ message: errors.array()[0].message })
    }
    next();
}
/**not fully understand this, just copied from docs and hope it will work :/
 * it works, but some of features needs fixing. require more tests in postman to catch all bugs
 */

validate.js

import { check } from 'express-validator';

export const registerRequirements = [
    check("name", "Name is required").notEmpty().trim().escape(),
    check("email", "Insert email").notEmpty().isEmail().normalizeEmail(),
    check("password", "Password has to be at least 6 characters long").isLength({ min: 6 }),
    check("age", "Age is required").notEmpty().trim().escape().isNumeric()
];

export const loginRequirements = [
    check("email", "MSG from validator: Insert valid email").isEmail().normalizeEmail(),
    check("password", "MSG from validator: Password has to be at least 6 characters long").isLength({ min: 6 }),
];

export const updateDetailsRequirements = [
    check("name", "MSG from validator: Name is required").notEmpty().trim().escape(),
    check("email", "MSG from validator: Insert valid email").isEmail().normalizeEmail(),
    check("age", "MSG from validator: Age is required").notEmpty().trim().escape().isNumeric()
];
export const updatePasswordRequirements = [
    check("password", "MSG from validator: Password has to be at least 6 characters long").isLength({ min: 6 }),
    check("newPassword", "MSG from validator: Password has to be at least 6 characters long").isLength({ min: 6 }),
];

export const createTaskRequirements = [
    check("title", "MSG from validator: Title is required").notEmpty().trim().escape(),
    check("description", "MSG from validator: Description is required").notEmpty().trim().escape(),
];

export const updateTaskRequirements = [
    check("title", "MSG from validator: Title is required").notEmpty().trim().escape(),
    check("description", "MSG from validator:Description is required").notEmpty().trim().escape(),
    check("completed", "MSG from validator: Completed is required").notEmpty().trim().escape().isBoolean()
];


todosController

import { Todo } from "../models/Todo.js";

export const getTodos = async (req, res) => {
    try {
        const todos = await Todo.find({ user: req.user })
        res.status(200).json({ message: "Task found!", todos })
    } catch (error) {
        console.error(error.message);
        res.status(500).send({ error: "Internal server error" })
    }
}

export const getTodo = async (req, res) => {
    const { id } = req.params;
    try {
        const todo = await Todo.findById(id);
        if (!todo) {
            res.status(404).json({ message: "Todo not found" })
        }
        if (todo.user.toString() !== req.user) {
            res.status(401).json({ message: "Not authorized" })
        }
        res.status(200).json({ message: "Task found!", todo })


    } catch (error) {
        console.error(error.message);
        res.status(500).json({ error: "Internal server error" })
        // res.status(500).send({ error: "Internal server error" })

    }
}

export const createTodo = async (req, res) => {
    const { title, description } = req.body;
    try {
        const todo = await Todo.create({
            title, description, completed: false, user: req.user
        })
        res.status(201).json({ message: "Task created successfully!", todo })

    } catch (error) {
        console.error(error.message);
        res.status(500).send({ error: "Internal server error" })
    }
}

export const updateTodo = async (req, res) => {
    const { id } = req.params;
    const { title, description, completed } = req.body
    try {
        const todo = await Todo.findById(id)
        if (!todo) {
            return res.status(404).json({ message: "Todo not found" })
        }
        if (todo.user.toString() !== req.user) {
            return res.status(401).json({ message: "Not authorized" })
        }
        todo.title = title;
        todo.description = description;
        todo.completed = completed;
        await todo.save();
        res.status(200).json({ message: "Todo updated successfully" })

    } catch (error) {
        console.error(error.message);
        res.status(500).send({ error: "Internal server error" })
    }

}

export const deleteTodo = async (req, res) => {
    const { id } = req.params;
    try {
        const todo = await Todo.findById(id)
        if (!todo) {
            return res.status(404).json({ message: "Todo not found" })
        }
        if (todo.user.toString() !== req.user) {
            return res.status(401).json({ message: "Not authorized" })
        }
        await todo.remove();
        return res.status(401).json({ message: "Todo deleted successfully" })
    } catch (error) {
        console.error(error.message);
        res.status(500).send({ error: "Internal server error" })
    }
}

userController

import { User } from "../models/User.js";
import jwt from "jsonwebtoken";
import bcrypt from 'bcrypt';
import { Todo } from "../models/Todo.js";

export const register = async (req, res) => {
    const { name, email, password, age } = req.body

    try {
        let user = await User.findOne({ email });
        if (user) {
            return res
                .status(400)
                .json({ message: "User already exists..." })
        }
        // hash the password

        const salt = await bcrypt.genSalt(10)
        const hashedPassword = await bcrypt.hash(password, salt)

        // create new user and insert in database

        user = new User({
            name, email, age, password: hashedPassword,
        })
        await user.save();

        const payload = {
            user: user._id,
        }

        const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: 360000 })
        res.cookie("token", token, {
            httpOnly: true,
            expiresIn: 360000
        })
        const { password: pass, ...rest } = user._doc;
        res.status(201).json({ message: "User created successfully", user: rest })

    } catch (error) {
        console.error(error.message);
        res
            .status(500)
            .json({ error: "Internal server error..." })
    }
};

export const login = async (req, res) => {
    const { email, password } = req.body;

    try {
        let user = await User.findOne({ email });
        // check if user exists

        if (!user) {
            return res
                .status(404)
                .json({ message: "User not found..." })
        }
        // compare password with users hashed password

        const isMatch = await bcrypt.compare(password, user.password)
        if (!isMatch) {
            return res.status(400).json({ message: "Invalid credentials..." })
        }
        const payload = {
            user: user._id,
        };

        const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: 360000 })
        res.cookie("token", token, {
            httpOnly: true,
            expiresIn: 360000
        })
        const { password: pass, ...rest } = user._doc;
        res.status(200).json({ message: "User logged in successfully", user: rest })

    } catch (error) {
        console.error(error.message);
        res
            .status(500)
            .json({ error: "Internal server error..." })
    }
};

export const logout = async (req, res) => {
    res
        .clearCookie("token")
        .status(200)
        .json({ message: "User logged out successfully" })

};

export const getMe = async (req, res) => {
    try {
        const user = await User.findById(req.user);
        if (!user) {
            return res.status(404).json({ message: "User not found...", user: rest })
        }
        const { password: pass, ...rest } = user._doc;
        return res.status(200).json({ message: "User found...", user: rest })


    } catch (error) {
        console.error(error.message);
        res
            .status(500)
            .json({ error: "Internal server error..." })
    }
};

export const updateDetails = async (req, res) => {
    const { name, email, age } = req.body;
    try {
        // let user = await User.findById(req.user);
        const user = await User.findById(req.user);

        if (!user) {
            return res.status(404).json({ message: "User not found" })
        }
        const userExists = await User.findOne({ email });
        if (userExists && userExists._id.toString() !== user._id.toString()) {
            return res.status(404).json({ message: "Email already taken" })
        }
        user.name = name;
        user.email = email;
        user.age = age;
        await user.save();

        const { password: pass, ...rest } = user._doc;
        res.status(200).json({ message: "User updated successfully", user: rest })

    } catch (error) {
        console.error(error.message);
        res
            .status(500)
            .json({ error: "Internal server error..." })
    }
};

export const updatePassword = async (req, res) => {
    const { password, newPassword } = req.body;
    try {
        let user = await User.findById(req.user)
        // const user = await User.findById(req.user);  //has to let because it throws error during updateing password :/
        if (!user) {
            return res.status(404).json({ message: "User not found" })
        }
        const isPasswordMatch = await bcrypt.compare(password, user.password);
        if (!isPasswordMatch) {
            return res.status(400).json({ message: "Invalid credentials" })
        }
        const salt = await bcrypt.genSalt(10);
        user.password = await bcrypt.hash(newPassword, salt);

        await user.save();

        const { password: pass, ...rest } = user._doc;
        return res.status(200).json({ message: "Password updated successfully", user: rest });



    } catch (error) {
        console.error(error.message);
        res
            .status(500)
            .json({ error: "Internal server error..." })
    }
};

export const deleteUser = async (req, res) => {
    try {
        const user = await User.findById(req.user);
        if (!user) {
            return res.status(404).json({ message: "User not found" });
        }
        // delete tasks belongs to exact user if user is deleted
        const todo = await Todo.find({ user: req.user });
        if (todo) {
            await Todo.deleteMany({ user: req.user })
        }
        res.clearCookie("token")        //added after postman testing -- check for errors

        await user.remove();
        res.status(200).json({ message: "User deleted successfully" })
    } catch (error) {
        console.error(error.message);
        res.status(500).json({ error: "Internal server error" })
    }
};

index.ts

import express from 'express';
import dotenv from 'dotenv';
import cookieParser from 'cookie-parser';
import { connectionDB } from "./database/connectionDB.js";
import todosRoutes from './routes/todos.route.js';
import usersRoutes from './routes/users.route.js';

const app = express();

dotenv.config();

connectionDB()

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use(cookieParser());

app.use("/api/todos", todosRoutes)
app.use('/api/users', usersRoutes)

app.listen(process.env.PORT, () => console.log(`Server is ON and running on PORT ${process.env.PORT}`))

users.route

import express from 'express';
import { register, login, logout, getMe, deleteUser, updateDetails, updatePassword } from '../controllers/usersController.js';
import { authorize } from '../controllers/middleware/authorize.js';
import { registerRequirements, loginRequirements, updateDetailsRequirements, updatePasswordRequirements } from '../controllers/middleware/validate.js';
import { validateResult } from '../controllers/middleware/validationResults.js';

const router = express.Router();

router.post('/register', registerRequirements, validateResult, register);
router.post("/login", loginRequirements, validateResult, login);

router.get("/logout", authorize, logout);
router.get("/me", authorize, getMe);
router.put('/updatedetails', authorize, updateDetailsRequirements, validateResult, updateDetails);
router.put("/updatepassword", authorize, updatePasswordRequirements, validateResult, updatePassword);

router.delete("/delete", authorize, deleteUser);

export default router


todos.route.js


import express from 'express';
import { authorize } from '../controllers/middleware/authorize.js'
import { createTaskRequirements, updateTaskRequirements } from '../controllers/middleware/validate.js';
import { validateResult } from '../controllers/middleware/validationResults.js';
import { getTodo, getTodos, createTodo, updateTodo, deleteTodo } from '../controllers/todosController.js'

const router = express.Router();

// crud operations

router.get("/:id", authorize, getTodo)

router.get("/", authorize, getTodos)

router.post("/create", authorize, createTaskRequirements, validateResult, createTodo)

router.put("/update/:id", authorize, updateTaskRequirements, validateResult, updateTodo)

router.delete("/delete/:id", authorize, deleteTodo)


authorize.js
import jwt from 'jsonwebtoken';

export const authorize = async (req, res, next) => {
    const token = req.cookies.token;
    if (!token) {
        return res.status(401).json({ message: "Not authorized!" })
    }
    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET)
        req.user = decoded.user;
        next();
    } catch (error) {
        console.error(error.message);
        res.status(500).json({ error: "Internal server error" })
    }
}


export default router

Todo.js

import mongoose from 'mongoose';

const TodoSchema = new mongoose.Schema({
    title: {
        type: String,
        required: true
    },
    description: {
        type: String,
        required: true,
    },
    completed: {
        type: Boolean,
        required: true
    },
    user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User",
        required: true,
    }
}, { timestamps: true });

export const Todo = mongoose.model("Todo", TodoSchema);

User.js

import mongoose from 'mongoose';

const UserSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    email: {
        type: String,
        required: true,
        unique: true
    },
    password: {
        type: String,
        required: true
    },
    age: {
        type: Number,
        required: true
    }
}, { timestamps: true });

export const User = mongoose.model("User", UserSchema);

connectionDB.js

import mongoose from "mongoose";

export const connectionDB = () => {
    mongoose.connect(process.env.MONGO_URI)
        .then(() => console.log("MongoDB Compass connected..."))
        .catch(err => console.error(err.message))
}